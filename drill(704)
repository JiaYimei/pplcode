#include "std_lib_facilities.h"

class Year{
      static const int min = 1800;
      static const int max = 2200;
public:
      class Invalid {};
      Year(int x): y{x} {if (x < min || x > max) throw Invalid{};}
      int year() {return y;}
      void increment() {y++;}
private:
      int y;

};

Year operator++(Year& year)
{
     year.increment();
}

ostream& operator << (ostream& os, Year year)
{
         return os << year.year();
}

const vector<string> months =
{
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "Novemver",
      "December"
};

enum class Month{
     jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec
};

Month operator++(Month& m)
{
      m = (m == Month::dec)? Month::jan : Month(int(m)+1);
      return m;
}

ostream& operator << (ostream& os, Month m)
{
          return os << months[int(m)];
}

class Date {
       
public:
       class Invalid {};
       Date(): year(Year{1970}), month(Month::jan), day(1) {}
       Date(Year y, Month m, int d): year(y), month(m), day(d) {if(!is_valid())throw false;}
       void add_day(int n);
       bool is_valid();
       Month get_month()const {return month;}
       int get_day()const {return day;}
       Year get_year()const {return year;}
private:
       Year year;
       Month month;
       int day;
       
};


/*Date::Date(int yy, int mm, int dd)
           :y{yy}, m{mm}, d{dd}
{
           if(!is_valid())throw Invalid{}; 
}*/

bool Date::is_valid()
{
     if(day < 1 || day > 31)return false;
     return true;
}
     /*if (y > 0)
         year = y;
     else
         error("Invalid year");
     if (m > 0 && m < 13)
         month = m;
     else 
         error("Invalid month");
     if (d > 0 && d < 32)
         day = d;
     else 
         error("Invalid day");
}*/

void Date::add_day(int n)
{
     day+= n;
     if (day > 31)
     {
         ++month;
         day-= 31;
         if(month == Month::jan)
         {
            ++year;
         }
     } 
    
     
}

      
/*void f(int x, int y)
try{
     Date dxy {2004, x, y};
     cout << dxy << '\n';
     dxy.add_day(2);     
}
catch(Date::Invalid){
      error("Invalid date");
} */   
int main()
try{    
    
     Date today {Year{1978}, Month::jun, 25};
     
     cout << "Date: " << today.get_year() << "." << today.get_month() << "." << today.get_day() << '\n';
     
     today.add_day(1);
     
     cout << "Date: " << today.get_year() << "." << today.get_month() << "." << today.get_day() << '\n';
     
     Date d {Year{2020}, Month::jan, 20};
     
     const Date cd {Year{2001}, Month::feb, 21};
     
     cout << d.get_day() << "---" << cd.get_day() << '\n';
     
     d.add_day(2);
     
     cout << d.get_day() << '\n';
     
     //cd.add_day(2);
     
     return 0;
     
}catch (Date::Invalid){
        cout << "Error: Invalid date\n";
        return 1;
    
}catch (Year::Invalid){
        cout << "Error: Invalid year\n";
        return 2;
        
}catch (exception& e){
        cout << "Error: " << e.what() << endl;
        return 3;
}

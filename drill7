#include "std_lib_facilities.h"

constexpr char EXIT = 'E';
constexpr char print = ';';
constexpr char number = '8';
//const string prompt = ">";
constexpr char result = '=';
constexpr char name = 'a'; 
constexpr char let = 'L';
const string declkey = "#"; 
// const string declket = "let";


double expression();

class Token{
public:
       char kind;
       double value;
       
       string name;
       Token(char ch): kind(ch), value(0) {}
       Token(char ch, double val): kind(ch), value(val) {}
       Token(char ch, string n): kind(ch), name(n) {}
       
};

class Token_stream{
public:
      Token_stream();
      Token get();
      void putback(Token t);
      void ignore(char c);
private:
      Token buffer;
      bool full;
      
};

class Variable{
public:
      string name;
      double value;
};

vector<Variable>var_table;//x+y;

bool is_declared(string var)
{
     for(const auto&v : var_table)
         if(v.name == var)return true;
     return false;
}

double define_name(string var, double val)
{
       if(is_declared(var)) error(var,"declared twice!");
       var_table.push_back(Variable{var,val});
       return val;
}

double get_value(string var)
{
       for(const auto& v : var_table)
           if(v.name == var) return v.value;
       error("get:undefined variable",var);
}

void set_value(string var, double val)
{
      for(auto& v : var_table)
          if(v.name == var){
               v.value = val;
               return;
          }
           error("set: undefined variable",var);
}

Token_stream::Token_stream(): full(false), buffer(0) {}

void Token_stream::putback(Token t)
{      
      if(full)error("Token_stream buffer is full!");
      buffer = t;
      full = true;
}    

Token Token_stream::get()
{ 
       if(full)
       {
          full = false;
          return buffer;
       
       }
       char ch;
       cin >> ch;
       
       switch(ch)
       {
              
              case EXIT:
              case print:
              case '(':
              case ')':
              case '+':
              case '-':
              case '*':
              case '/':
              case '%':
              case '=':
              case 's':
              case '^':
                    return Token(ch);
              
              case '.':
              case '1':  case '2':  
              case '3':  case '4':  
              case '5':  case '6':  
              case '7':  case '8':  
              case '9':  case '0':     
              {
                   cin.putback(ch);
                   double val;
                   cin >> val;
                   return Token(number,val);
                  
               }
               case'#':
                     return Token(let);
               default:
                    if(isalpha(ch)){
                       
                       string s;
                       s += ch;
                       while(cin.get(ch) && (isalpha(ch) || isdigit(ch))) s += ch;
                       cin.putback(ch);
                       if(s == declkey) return Token{let};
                       //if(s == "#") return Token{let};
                       else if(is_declared(s))
                               return Token(number, get_value(s));
                       return Token(name,s);
                    }
                    error("Invalid token!");
                    
        }      
}

void Token_stream::ignore(char c)
{
      if(full && c == buffer.kind){
              full = false;
              return;
      }
       full = false;
       
       char ch = 0;
       while(cin>>ch)
             if(ch == c)return;
}

Token_stream ts;

void clean_up_mess(){
     ts.ignore(print);
}

double primary()
{
       Token t = ts.get();
       switch(t.kind)
       {
              case '(':
              {
                    double d = expression();
                    t = ts.get();
                    if (t.kind != ')') error(") is expected!");
                    return d;
              }
              case number:
                    return t.value;
              case '-':
                    return -primary();
              case '+':
                    return primary();
              
              default:
                    error("Primary wrong");                
       
              }


}

double term()
{
       double left = primary();
       Token t = ts.get();
       while(true)
       {
             switch(t.kind)
             {
                    case '*':
                          left *= primary();
                          t = ts.get();
                          break;
                     case '/':
                     {    
                           double d = primary();
                           if (d == 0) error("divide by zero!");
                           left /= d;
                           t = ts.get();
                           break;
                      }
                      case '%':
                      {
                            double d = primary();
                            if (d == 0) error("zero divider!");
                            left = fmod(left,d);
                            t = ts.get();
                            break;
                       }
                       case 's':
                       {
                            double d = primary();
                            if (d < 0) error("wrond sqrt!");
                            left = sqrt(d);
                            t = ts.get();
                            break;
                       }
                       case '^':
                       {
                            
                            double d = primary();
                            left = pow(left,d);
                            t = ts.get();
                            break;
                       }
                       
                      default:
                            ts.putback(t);
                            return left;
                           
                          
              }
        }
        
}

double expression()
{
       double left = term(); // 43-34;
       Token t = ts.get();      
       while(true)
       {
             switch(t.kind)
             {
                    case '+':
                          left += term();
                          t = ts.get();
                          break;
                    case '-':
                          left -= term();
                          t = ts.get();
                          break;
                    default:
                           ts.putback(t);
                           return left; 
             }
       
       }

}

double declaration()
{
        Token t = ts.get();
        if(t.kind != name) error("name expected in declaration!");
        string var_name = t.name;
        
        Token t2 = ts.get();
        if(t2.kind != '=') error("= missing in declaration of", var_name);
        
        double d = expression();
        define_name(var_name, d);
        return d;
}

double statement()
{
       Token t = ts.get();
       switch(t.kind){
       
       case let:
            return declaration();
       default:
            ts.putback(t);
            return expression();
       }
}

 void calculate()
{

    //cout << "Welcome to our simple calculator.\n" << "Please enter expression using floating-point numbers and operators such that '+', '*' etc.\n" <<  "Then enter ';' to get results, enter 'q' to exit" << '\n';
    
    //double val;
    
    while(cin)
    try{ 
    
    //cout << prompt;    
    
    Token t = ts.get();
    while(t.kind == print) t = ts.get();
    if(t.kind == EXIT)return;
    ts.putback(t);
    cout << "=" << statement() << endl;
    } 
    catch(exception& e){
       cerr << e.what() << endl;
       clean_up_mess();
    }
    /*else
       ts.putback(t);
       val = expression();
     }     
       return 0;*/
}
int main()
try{
      
    define_name("pi",3.1415926535);
    define_name("e",2.7182818284);
    define_name("k",1000);
    
    calculate();
    
    return 0;      
       
} 
catch(exception& e){
       cerr << e.what() << endl;
       return 1;
} 
catch (...){
       cerr << "Some exception!" << endl;
       return 2;
}




















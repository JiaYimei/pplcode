#include"std_lib_facilities.h"

template<typename T>//1
class S{
private:
       T val;

public:
       
      S() {  } //2

      S(T val1) {val = val1;} //3
       
      T get(); //5 
      T get() const; //11

      T set() //9
      {
        T val2;
        val = val2;
      }
      
      T operator = (const T&);// 10     
        
      //void read_val(T& v); //12
   
};


template<typename T> //6
T S<T>::get()
{
  return val;
}

template<typename T> //11
T S<T>:: get() const
{
  return val;
}

template<typename T> //10
T S<T>::operator = (const T&)
{ 
     T val2;
     val = val2;
}

template<typename T> //12
void read_val(T& v)
{
     cin >> v;
}

int main(){
     
    S<int>si (1);//3
    S<char>sc ('M');
    S<double>sd (1.1);
    S<string>ss ("we");
    S<vector<int>>svi ({2}); 
    
   /* si.val = 1; //3
       cout << si.val << endl;
    sc.val = 'M';
       cout << sc.val << endl;
    sd.val = 1.1;
       cout << sd.val << endl;
    ss.val = "we";
       cout << ss.val << endl;
    svi.val = {2};
       for(auto i : svi.val)
       cout << i << endl;*/
    
      
    cout << si.get() << endl; //8
    cout << sc.get() << endl;
    cout << sd.get() << endl;
    cout << ss.get() << endl;
    for(auto i : svi.get())
    cout << i << endl; 
    
    
    int iv; 
    read_val(iv); 
    S<int>siv(1);
    cout << siv.get() << endl;
    
    char b; 
    read_val(b);
    S<char>bc('b');
    cout << bc.get() << endl;
    
    double d; 
    read_val(d);
    S<double>dd(2.2);
    cout << dd.get() << endl;
    
    string str; 
    read_val(str);
    S<string>strg("you");
    cout << strg.get() << endl;

return 0;
}

#include"std_lib_facilities.h"

template<typename T>
struct S{
     //T val;//1
     
     S() {};//2
     
     S(T val1) {val = val1;}//3
     
     T print();//3
     
     T get();//5
     
     T set(T val2) {val = val2;}//9
     
     T operator = (const T&);//10
     
     T get() const;//11
     
    
private:
     T val;//7
};  

template<typename T>
T S<T>::print()//3
{
         return val;
    
}

template<typename T>//6
T S<T>::get()
{
        return val;
}

template<typename T>//10
T S<T>::operator = (const T&)
{
        T val2;
        val = val2;
}

template<typename T>//11
T S<T>::get() const
{
        return val;
}

template<typename T>//12
void read_val(T& v)
{
        cin >> v;
}
int main(){
      
      S<int>i(1);//3
      S<char>c('m');
      S<double>d(1.1);
      S<string>s("re");
      S<vector<int>>vi({1,2,3});
      
      cout << i.print() << endl;//4
      cout << c.print() << endl;
      cout << d.print() << endl;
      cout << s.print() << endl;
      vector<int>v = vi.print();
      for(int vv : v)
      cout << vv << endl;
      
      cout << i.get() << endl; //8
      cout << c.get() << endl;
      cout << d.get() << endl;
      cout << s.get () << endl;
      vector<int>v1 = vi.get();
      for(int vv1 : v)
      cout << vv1 << endl;
     
      
      int rv; //13
      read_val(rv); 
      S<int>si(3);
      cout << si.get() << endl;
    
      char rb; 
      read_val(rb);
      S<char>sc('e');
      cout << sc.get() << endl;
    
      double rd; 
      read_val(rd);
      S<double>sd(3.3);
      cout << sd.get() << endl;
      
      string rs;
      read_val(rs);
      S<string>ss("mewo");
      cout << ss.get() << endl;
     
      
      
    
return 0;    
}
